{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","console","log","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","original","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OAEI,uBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACvCC,QAAQC,IAAI,gBACZR,EAAc,MASlB,UACI,8CACA,uBACIS,KAAO,OACPC,MAASX,EACTY,SAzBc,SAACT,GACvBK,QAAQC,IAAIN,EAAEU,OAAOF,OACrBV,EAAcE,EAAEU,OAAOF,QAwBfG,YAAY,0B,+BC9BfC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,SAASZ,QAVd,kBAaZM,GAbY,4CAAH,sDCDPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIhC,OAFAV,QAAQC,IAAImB,EAAOV,GAGf,sBAAKc,UAAU,yCAAf,UACI,6BAAKJ,IACL,qBAAKK,IAAKf,EAAKgB,IAAKN,QCJnBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZjB,mBAAS,CAE/BwB,KAAM,GACNa,SAAS,IALyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA0BtC,OAjBAC,qBAAU,WAENxB,EAAQC,GACPwB,MAAK,SAAAhB,GACFiB,YAAW,WACPH,EAAS,CAELf,KAAMC,EACNY,SAAS,MAGd,UAER,CAACpB,IAIGqB,EDvBuBK,CAAa1B,GAA9BQ,EAFsB,EAE5BD,KAAYa,EAFgB,EAEhBA,QAEnB,OACI,qCACI,6BAAKpB,IACL,uBAECoB,GAAW,mBAAGJ,UAAW,mCAAd,wBAEZ,qBAAKA,UAAW,YAAhB,SAEQR,EAAKC,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEWtBgB,MA1Bf,WAAyB,IAAD,EAGc5C,mBAAS,CAAC,cAHxB,mBAGf6C,EAHe,KAGH9C,EAHG,KAKtB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEI8C,EAAWnB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEGA,SAAYA,GADLA,YCRR6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.eabe8518.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n            setCategories( cat => [ inputValue ,...cat]);\r\n            console.log('Submit Hecho');\r\n            setInputValue('');\r\n\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add Category</h2>\r\n            <input \r\n                type = \"text\"\r\n                value = {inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Agregue Categoria\"\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","\r\n\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=eRJaRBYM1wq9rKFC4XohYux6OyUGqasp`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.original.url\r\n        }\r\n    });\r\n    return gifs;\r\n    \r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    console.log(title, url)\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <h4>{title}</h4>\r\n            <img src={url} alt={title} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React /* {useState, useEffect} */ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n/* import {getGifs} from '../helpers/getGifs'; */\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: gifs, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            <br />\r\n\r\n            {loading && <p className= \"animate__animated animate__flash\">Loading...</p>}\r\n\r\n            <div className= \"card-grid\">\r\n                {\r\n                    gifs.map(img => (\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n        .then(gifs => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    \r\n                    data: gifs,\r\n                    loading: false\r\n                });\r\n                    \r\n            }, 3000)\r\n        })     \r\n    }, [category]);\r\n\r\n    \r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react';\n\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nfunction GifExpertApp() {\n\n  \n  const [categories, setCategories] = useState(['Samurai X']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories= { setCategories }/>\n      <hr />\n\n      <ol>\n        {\n          categories.map(category => \n             <GifGrid \n                key = {category}\n                category = {category}/>\n          )\n        }\n\n      </ol>\n   </> \n  )\n}\n\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}